<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot前后端分离项目部署到云服务器</title>
    <url>/2021/07/15/SpringBoot%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>第一次正式部署项目，把学习摸索的过程记录下来</p>
<a id="more"></a>

<p>后端项目：Spring Boot 项目</p>
<p>前端项目：Vue 项目</p>
<p>云服务器：阿里云 CentOS</p>
<h3 id="部署后端项目"><a href="#部署后端项目" class="headerlink" title="部署后端项目"></a>部署后端项目</h3><p>使用 jar 包部署的方式：</p>
<p>把 Spring Boot 项目使用 Maven 打 jar 包（打包之前记得修改 active profile 为 prod），然后把 jar 包放到云服务器的某一位置（我直接放到了 home 目录下）</p>
<p>前台运行：<code>java -jar xxx.jar</code>，（我们是部署项目，当然不能这么运行了）</p>
<p>后台运行：<code>nohup java -jar xxx.jar &gt;log.txt &amp;</code></p>
<ul>
<li><code>nohup</code>：指定应用在后台运行</li>
<li><code>log.txt</code>：项目运行的日志文件</li>
</ul>
<blockquote>
<p>运行命令后会返回一个进程号，记住它，因为关闭应用的时候会用到</p>
<p>如果忘了进程号，可以使用 <code>ps -ef | grep xxx.jar</code> 查询相关 jar 包运行的应用的进程号</p>
<p>关闭应用：<code>kill -9 进程号</code> （ <code>-</code> 后面就是数字 9）</p>
</blockquote>
<p>最后需要在阿里云的安全组中把项目运行的端口打开（就是在项目配置文件中配置的 <code>server.port</code>）</p>
<h3 id="部署前端项目"><a href="#部署前端项目" class="headerlink" title="部署前端项目"></a>部署前端项目</h3><h4 id="1-使用-Tomcat-部署"><a href="#1-使用-Tomcat-部署" class="headerlink" title="1. 使用 Tomcat 部署"></a>1. 使用 Tomcat 部署</h4><p>在打包 Vue 应用之前，需要对 Vue 应用做一些调整：</p>
<ol>
<li><p>在 <code>src/router/index.js</code> 中，修改一处代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history: createWebHistory(process.env.BASE_URL),</span><br><span class="line">    routes,</span><br><span class="line">    base: <span class="string">'/flash-note/'</span>   <span class="comment">//新加上这个，其他的都是原来有的</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目的根目录创建 <code>vue.config.js</code> 文件，其中添加代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"/flash-note/"</span> : <span class="string">"/"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>调整完毕后，运行 <code>yarn build</code> 打包项目，打包后在项目的根目录会生成 <code>dist</code> 的文件夹</p>
<p>接下来在云服务器的 Tomcat 的 webapp 目录下新建一个 flash-note 文件夹（文件夹名需要和 index.js 中的 base 属性的值一样）</p>
<p>然后把 dist 目录下的所有内容都拷贝到 Tomcat 中新建的 flash-note 文件夹</p>
<p>重启 Tomcat，在浏览器中输入 <code>https://服务器ip:8080/flash-note</code> 就可以看到打开前端项目了（记得在安全组中开放 8080 端口）</p>
<h4 id="2-使用-NGINX-部署"><a href="#2-使用-NGINX-部署" class="headerlink" title="2. 使用 NGINX 部署"></a>2. 使用 NGINX 部署</h4><ol>
<li><p>在项目的根目录创建 <code>vue.config.js</code> 文件，其中添加代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">"production"</span> ? <span class="string">"./"</span> : <span class="string">"/"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>yarn build</code> 打包项目，然后把打包生成的 dist 文件夹中的内容拷贝到服务器中（我放在了 <code>/home/flash-note/</code> 目录下）</p>
</li>
<li><p>打开 NGINX 的配置文件，修改 server 的 location，然后重新加载配置文件即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root   /home/flash-note;</span><br><span class="line">    autoindex on;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器输入 <code>服务器ip</code> 就能访问到项目了</p>
</li>
</ol>
<h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><blockquote>
<p> 域名备案：如果域名解析的服务器是国内的，则必须备案；如果是国外的则可以不备案</p>
</blockquote>
<p>解析域名到自己的阿里云服务器（39.108.93.55）</p>
<ol>
<li><p>使用 Tomcat 部署应用，需要修改 server.xml 文件</p>
<ul>
<li><p>修改 <code>&lt;Connector port=&quot;80&quot;&gt;</code>，prot 默认是 8080，这里修改为 80</p>
</li>
<li><p>修改 <code>&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;www.flashnote.top&quot;&gt;</code>，defaultHost 改为自己的 <code>&lt;Host&gt;</code> 中配置的 name</p>
</li>
<li><p>配置 Host        </p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"www.flashnote.top"</span> <span class="attr">appBase</span>=<span class="string">"webapps"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"flash-note"</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> &gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>使用 NGINX 部署应用，什么都不用修改</p>
</li>
</ol>
<blockquote>
<p>遇到的问题：tomcat server.xml 中改了 port=80 之后还是不生效，检查发现是阿里云中 80 端口被占用了，需要先解除 80 端口的占用：<code>sudo fuser -k 80/tcp</code></p>
</blockquote>
]]></content>
      <categories>
        <category>Java EE</category>
      </categories>
      <tags>
        <tag>项目部署</tag>
        <tag>SpringBoot</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware虚拟机网络配置</title>
    <url>/2021/06/26/VMWare%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>对于虚拟机来说，网络配置这一块比较麻烦，所以记录一下自己配置 VMWare 虚拟机网络的过程</p>
<a id="more"></a>



<blockquote>
<p>参考博客：<a href="https://blog.csdn.net/yaoqiancuo3276/article/details/80375850" target="_blank" rel="noopener">https://blog.csdn.net/yaoqiancuo3276/article/details/80375850</a></p>
</blockquote>
<p>目的：实现虚拟机有<strong>单独</strong>且<strong>固定</strong>的 ip</p>
<ul>
<li>单独的 ip：使用桥接模式，便可以获得单独的 ip</li>
<li>固定的 ip：需要进行后续的设置</li>
</ul>
<p>Vmware 虚拟机网络使用桥接模式：</p>
<p><img src="http://www.flashnote.top/image-20210508221110272.png" alt="image-20210508221110272"></p>
<p>但是使用桥接模式，ip 会不定时的变化，所以要配置固定 ip：</p>
<ol>
<li><img src="http://www.flashnote.top/image-20210508221529056.png" alt="image-20210508221529056"></li>
</ol>
<p>这时需要查看现在WiFi的详细网络信息：</p>
<p><img src="http://www.flashnote.top/image-20210508222410587.png" alt="image-20210508222410587"></p>
<p>然后去虚拟机中的 centos 中配置网络：</p>
<p>先查看 Linux 网络情况：（发现网卡为 <code>ens33</code>）</p>
<p><img src="http://www.flashnote.top/image-20210511134415902.png" alt="image-20210511134415902"></p>
<blockquote>
<p>如果输入 <code>ifconfig</code> 命令之后没有出现 <code>ens33</code> 相关信息，依次执行下面三条命令，就可以修复：</p>
<p><code>systemctl stop NetworkManager</code> 临时关闭网络管理<br><code>systemctl disable NetworkManager</code> 永久关闭网络管理<br><code>systemctl start network.service</code> 开启网络服务</p>
</blockquote>
<p>编辑网卡相关配置：<code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code></p>
<p>(修改成功后需要重启网络才能生效：<code>service network restart</code>)</p>
<p><img src="http://www.flashnote.top/image-20210508223305892.png" alt="image-20210508223305892"></p>
<blockquote>
<p>注意：如果换了 WiFi，那么主机的 ip 就会变化，那时候就需要手动到虚拟机中调整，比较麻烦。</p>
<p>虚拟机的网络配置就是一个大坑啊（？？？难道是我的打开方式不对？？？），感觉以后能不用虚拟机就不用虚拟机。</p>
</blockquote>
]]></content>
      <tags>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>Autowored注解和Resource注解的区别</title>
    <url>/2021/06/15/Autowired%E6%B3%A8%E8%A7%A3%E5%92%8CResource%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>两个注解都可以自动注入bean，他们俩有啥不一样呢？</p>
<a id="more"></a>



<p>@Autowired</p>
<p>是 Spring 的一个注解，按照类型注入 bean，如果想要按照名称注入 bean，需要搭配 <code>@Qualifier</code> 注解使用</p>
<p>可以作用在：构造器、方法、参数、成员变量和注解上</p>
<p>@Resource</p>
<p>是 JDK 提供的一个注解，Spring 支持其注入 bean，默认按照名称注入，也可通过配置 type 属性实现按照类型注入。</p>
<p>可以作用在：类、成员变量和方法上</p>
]]></content>
      <categories>
        <category>Java EE</category>
      </categories>
      <tags>
        <tag>Autowired</tag>
        <tag>Resource</tag>
      </tags>
  </entry>
  <entry>
    <title>Repository注解和Mapper注解的区别</title>
    <url>/2021/06/15/Repository%E6%B3%A8%E8%A7%A3%E5%92%8CMapper%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>你知道这两个注解有什么不一样吗</p>
<a id="more"></a>



<p><strong>开发过程中遇到了一个问题：</strong></p>
<p>在 service 中注入 mapper 的时候，发生了爆红的情况：（此时 userMapper 接口上使用的是 <code>@Mapper</code> 注解）</p>
<p><img src="http://www.flashnote.top/image-20210615100455667.png" alt="image-20210615100455667"></p>
<p>但是项目的运行没有任何问题。</p>
<p><strong>于是去 Google 了一下，找到了一个解决办法：</strong></p>
<blockquote>
<p>把 UserMapper 接口的 <code>@Mapper</code> 注解换成 <code>@Repository</code> （我使用 <code>@Mapper</code> 时就在 Spring Boot 的主启动类上面添加了 <code>@MapperScan</code> 注解）</p>
</blockquote>
<p><strong>解决了之后我就想：</strong><code>@Mapper</code> 注解和 <code>@Repository</code> 注解究竟有什么不一样呢，为什么会出现这种差别呢？</p>
<p>查阅相关资料发现两者不同点在于：</p>
<ul>
<li><code>@Repository</code>：Spring 的注解，表示这个接口是一个 Mapper，需要配合 <code>@MapperScan</code> 注解使用。</li>
<li><code>@Mapper</code>：Mybatis 的注解，相当于 <code>@Repository</code> + <code>@MapperScan</code></li>
</ul>
<p>那为什么使用 @Repository 就不会爆红呢？</p>
<blockquote>
<p>因为 <code>@Autowired</code> 同样是 Spring 的注解，使用同为 Spring 注解的 <code>@Repository</code> 时，就可以检测到 userMapper 接口。</p>
</blockquote>
<hr>
<p>在查资料的过程中，发现还有一个办法可以解决使用 <code>@Mapper</code> 注解时的爆红问题：</p>
<blockquote>
<p>把 <code>@Autowired</code> 注解换成 <code>@Resource</code> 注解</p>
<p>换了注解后，没有了爆红，项目也可以正常运行</p>
<p>因为 <code>@Autowired</code> 注解默认情况下需要注入的属性不为 null（属性 <code>required = true</code>），而 <code>@Resource</code> 注解注入的属性可以为 null</p>
<p>关于 <code>@Autowired</code> 和 <code>@Resource</code> 的区别，可以看我的这篇文章：<a href="/2021/06/15/Java/Autowired注解和Resource注解的区别">@Autowired和@Resource的区别</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java EE</category>
      </categories>
      <tags>
        <tag>Repository</tag>
        <tag>Mapper</tag>
      </tags>
  </entry>
  <entry>
    <title>WebLogic的安装及配置</title>
    <url>/2021/05/31/weblogic%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>因为公司的应用主要部署在 WebLogic 上，所以记录一下 WebLogic 的安装和简单配置</p>
<a id="more"></a>




<blockquote>
<p>安装及配置参考文档：</p>
<ol>
<li><p>官网安装文档：<a href="https://docs.oracle.com/en/middleware/standalone/weblogic-server/14.1.1.0/wlsig/installing-oracle-weblogic-server-and-coherence-software.html#GUID-E4241C14-42D3-4053-8F83-C748E059607A" target="_blank" rel="noopener">https://docs.oracle.com/en/middleware/standalone/weblogic-server/14.1.1.0/wlsig/installing-oracle-weblogic-server-and-coherence-software.html#GUID-E4241C14-42D3-4053-8F83-C748E059607A</a></p>
</li>
<li><p>配置方式：<a href="https://www.cnblogs.com/xdp-gacl/p/4140683.html" target="_blank" rel="noopener">https://www.cnblogs.com/xdp-gacl/p/4140683.html</a></p>
</li>
</ol>
</blockquote>
<h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><ol>
<li><p>从 Oracle 官网下载 weblogic 的安装包（14.1.1.0）</p>
<p>下载地址：<a href="https://www.oracle.com/middleware/technologies/fusionmiddleware-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/middleware/technologies/fusionmiddleware-downloads.html</a></p>
<p><img src="http://www.flashnote.top/image-20210506211853872.png" alt="image-20210506211853872"></p>
</li>
<li><p>把下载的 ZIP 压缩包解压，获得 <code>fmw_14.1.1.0.0_wls_lite_quick_generic.jar</code> 文件，把文件移动到要安装的目录下。</p>
</li>
<li><p>以管理员身份运行 CMD，cd 到要安装的目录下。</p>
</li>
<li><p>执行 <code>D:\develop\Java\jdk1.8.0_241\bin\java -jar fmw_14.1.1.0.0_wls_lite_quick_generic.jar</code>，开始静默安装。</p>
</li>
<li><p>安装完成后，会在安装目录下生成 <code>wls1411</code> 文件夹，该文件夹就是 weblogic 的安装目录。</p>
</li>
</ol>
<h2 id="配置步骤："><a href="#配置步骤：" class="headerlink" title="配置步骤："></a>配置步骤：</h2><h4 id="1-配置-domain："><a href="#1-配置-domain：" class="headerlink" title="1. 配置 domain："></a>1. 配置 domain：</h4><ol>
<li><p>打开 <code>wls1411\oracle_common\common\bin</code> 目录，执行 <code>config.cmd</code>，然后根据提示一步一步配置，可参考上面的配置方式的链接。</p>
</li>
<li><p>配置完成后，会在 <code>wls1411</code> 文件夹下生成 <code>user_projects</code> 文件夹，在 <code>user_projects\domains\base_domain</code>  文件夹中有 <code>startWebLogic.cmd</code> 文件，双击启动，就可以启动 weblogic 服务器了。</p>
</li>
<li><p>启动后在浏览器中打开 <code>localhost:7001/console</code> 就可以访问 weblogic 的控制面板，可以在控制面板上面部署应用。</p>
<blockquote>
<p>在浏览器的控制面板中部署应用的时候，应用的各项都设置好了，点击完成，风扇会狂转，为什么部署应用会这么消耗资源呢？</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>weblogic 登录：</p>
<ul>
<li>username：weblogic</li>
<li>password：webl0gic</li>
</ul>
</blockquote>
<blockquote>
<p>weblogic 部署应用的 3 种方式：</p>
<ol>
<li><p>直接在浏览器的控制面板中部署，按照步骤一步一步来。</p>
</li>
<li><p>直接把 war 包或者 war 包解压出来的文件夹放到 <code>\user_projects\domains\base_domain\autodeploy</code> 中。</p>
</li>
<li><p>在 <code>\user_projects\domains\base_domain\config\config.xml</code> 中添加应用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-deployment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>scsp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span>&gt;</span>AdminServer<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module-type</span>&gt;</span>war<span class="tag">&lt;/<span class="name">module-type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source-path</span>&gt;</span>C:\Users\pikachu\Desktop\work\scsp-ta3project-1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">source-path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security-dd-model</span>&gt;</span>DDOnly<span class="tag">&lt;/<span class="name">security-dd-model</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">staging-mode</span> <span class="attr">xsi:nil</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">staging-mode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plan-staging-mode</span> <span class="attr">xsi:nil</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">plan-staging-mode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache-in-app-directory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">cache-in-app-directory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-deployment</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<blockquote>
<p>一个小经验：</p>
<p>在使用命令行部署应用的时候（Tomcat / weblogic），如果没有出现任何的 error 信息，但是启动过程卡住不往下走了，那就要考虑是否是应用中有需要访问 URL 的地方，而此时的网络是不通的。</p>
</blockquote>
]]></content>
      <tags>
        <tag>WebLogic</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 项目放到 Tomcat 运行</title>
    <url>/2021/04/05/Spring%20Boot%E9%A1%B9%E7%9B%AE%E6%94%BE%E5%88%B0Tomcat/</url>
    <content><![CDATA[<p>手动把 Spring Boot 项目打包并放到 Tomcat 中运行，记录一下需要调整的地方。</p>
<a id="more"></a>

<h2 id="Spring-Boot-项目放到-Tomcat-运行"><a href="#Spring-Boot-项目放到-Tomcat-运行" class="headerlink" title="Spring Boot 项目放到 Tomcat 运行"></a>Spring Boot 项目放到 Tomcat 运行</h2><p>Spring Boot 项目直接打包放到 Tomcat中是不能运行的，需要对 Spring Boot 的项目做一些修改。</p>
<ol>
<li><p><strong>修改打包方式</strong></p>
<p>Spring Boot 的项目默认是打 jar 包，现在修改为打 war 包</p>
<p><img src="http://www.flashnote.top/%E6%89%93%E5%8C%85%E6%96%B9%E5%BC%8F.png" alt="打包方式"></p>
</li>
<li><p><strong>屏蔽自带 Tomcat</strong></p>
<p><img src="http://www.flashnote.top/%E5%B1%8F%E8%94%BD%E8%87%AA%E5%B8%A6tomcat.png" alt="屏蔽自带tomcat"></p>
</li>
<li><p><strong>修改 Spring Boot 主启动类</strong></p>
<ol>
<li>继承 SpringBootServletInitializer 类</li>
<li>重写 configure 方法</li>
<li>修改 return 为 <code>builder.sources(SpringbootDemoApplication.class);</code></li>
</ol>
<p><img src="http://www.flashnote.top/%E7%BB%A7%E6%89%BF%E7%B1%BB.png" alt="继承类"></p>
</li>
<li><p><strong>maven clean，maven package</strong></p>
</li>
<li><p><strong>把 war 包放到 Tomcat 目录下的 webapps 目录下</strong></p>
</li>
<li><p><strong>启动 Tomcat（启动 Tomcat 时会自动解压 Tomcat 目录下的 war 包）</strong></p>
</li>
<li><p><strong>浏览器访问（war 包解压后的文件夹名称就是项目的虚拟目录）</strong></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>学习中遇到的问题</title>
    <url>/2020/02/06/%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>学习和工作中遇到的一些问题及解决过程</p>
<p>避免以后在同一个坑里跌倒</p>
<a id="more"></a>

<h3 id="Mac-OS-配置-Maven-环境变量"><a href="#Mac-OS-配置-Maven-环境变量" class="headerlink" title="Mac OS 配置 Maven 环境变量"></a>Mac OS 配置 Maven 环境变量</h3><ol>
<li><p>maven 下载 tar.gz 格式压缩包 下载完成会自动解压</p>
</li>
<li><p>将解压后的 maven 拖入终端可以得到 maven 解压后的路径</p>
</li>
<li><p>在终端使用 Vim 编辑 <code>.bash_profile</code>:  <code>vim ~/.bash_profile</code></p>
</li>
<li><p>输入以下命令：</p>
<p><code>MAVEN_HOME=/Users/qiuzhijie/Downloads/apache-maven-3.5.4</code>  （这里是自己的maven路径）</p>
<p>`PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH:``</p>
<p>``export MAVEN_HOME PATH`</p>
</li>
<li><p>终端输入 <code>source .bash_profile</code></p>
</li>
<li><p><code>mvn -v</code> 如果有 maven 的信息则说明配置成功</p>
</li>
</ol>
<hr>
<h3 id="idea-中新建-XML-文件"><a href="#idea-中新建-XML-文件" class="headerlink" title="idea 中新建 XML 文件"></a>idea 中新建 XML 文件</h3><p>idea 中新建 XML 文件时，（如果选的是 <code>File</code> 创建）一定要自己把后缀 <code>.xml</code> 写上。</p>
<hr>
<h3 id="idea-控制台中文乱码"><a href="#idea-控制台中文乱码" class="headerlink" title="idea 控制台中文乱码"></a>idea 控制台中文乱码</h3><p>idea 版本：2019.1.4</p>
<p>已设置  idea Settings –&gt; Editor –&gt; File Encodings 中：</p>
<ul>
<li>Global Encoding : UTF-8</li>
<li>Project Encoding : UTF-8</li>
<li>Default encoding for properties files : UTF-8</li>
</ul>
<p>仍然会出现乱码的问题</p>
<p>修改 <code>idea安装目录/bin/idea64.exe.vmoptions</code> 文件，在文件的最后加上 <code>-Dfile.encoding=UTF-8</code> 即可</p>
<hr>
<h3 id="在-pom-xml-中导坐标没有提示"><a href="#在-pom-xml-中导坐标没有提示" class="headerlink" title="在 pom.xml 中导坐标没有提示"></a>在 pom.xml 中导坐标没有提示</h3><blockquote>
<p>idea版本：2019.3.2，maven版本：3.6.1（idea 内置 maven）</p>
</blockquote>
<p>在使用 idea 构建 maven 项目，在项目的 pom.xml 文件中导坐标时，发现<strong>输入之后没有提示了</strong>，之前使用 idea 的时候没有遇到过这种情况。</p>
<p>首先想到的是 maven 的问题，因为之前都是使用自己的 maven，所以我就去 maven 官网自己下载了 maven 3.6.3 版本，但是在 idea 中配置了自己的 maven 之后并没有作用，还是不提示。。。</p>
<p>去百度，关于没有提示，是因为没有 maven 索引造成的，大家给出的解决方案都是在 idea–&gt;file–&gt;settings–&gt;maven–&gt;repository 中把两个仓库 update 一下就好了，这是一个建立索引的过程，索引文件夹在 <code>${用户目录}\.IntelliJIdea2019.1\system\Maven\Indices</code> 中。</p>
<p>点击 update，local 直接完成，<strong>remote 一直 error，检查发现，是在 maven 的 setting.xml 文件中配置了仓库的 mirror</strong>，需要先把 mirror 注释掉，然后再更新 remote 仓库（需要网络环境良好）</p>
<p>local 和 remote 都 update 完成之后，再次尝试是否有提示了，发现在手动 ctrl+shift+space 提示，可以出现提示，但是过程非常卡。。。</p>
<p>这时候就又去百度了，看到大家说idea 2019.2 和 maven 的兼容性出了一些问题，导致idea–&gt;file–&gt;settings–&gt;maven–&gt;repository 中没有内容，local和remote都没有。有人也是和我一样的问题，确定是 idea 版本的问题，大家都说 2019.2.x 和 2019.3.x bug 甚多。</p>
<p>更换版本：idea 2019.3.4，最新的一个release版本（截止2019.3.19），以为idea会把这个小问题给干掉了，结果还是不行。。。</p>
<p>更换版本：<strong>idea 2019.1.4</strong>，2019.2 之前的最后一个版本，<strong>一切OK</strong>（这个版本很多朋友都推荐，完全没有maven相关的问题）</p>
<hr>
<h3 id="导入依赖-Resolving-Maven-dependencies-非常慢"><a href="#导入依赖-Resolving-Maven-dependencies-非常慢" class="headerlink" title="导入依赖 Resolving Maven dependencies 非常慢"></a>导入依赖 Resolving Maven dependencies 非常慢</h3><blockquote>
<p>idea版本：2019.1.4，maven版本：3.6.1</p>
</blockquote>
<p>遇到这个问题，首先检查网络问题：</p>
<ul>
<li>如果是从 Maven 中央仓库下载依赖，因为是国外网站，可能会网络慢甚至不通。可考虑使用阿里的 Maven 镜像。</li>
<li>如果是从公司的私服下载，需要检查是否连接了公司的网络。</li>
</ul>
<hr>
<h3 id="导入别人的项目时，Maven-无法导入依赖"><a href="#导入别人的项目时，Maven-无法导入依赖" class="headerlink" title="导入别人的项目时，Maven 无法导入依赖"></a>导入别人的项目时，Maven 无法导入依赖</h3><blockquote>
<p>idea版本：2019.1.4，maven版本：3.6.1</p>
</blockquote>
<blockquote>
<p>我这个问题可能比较特殊，可能不具备普适性，有遇到同样问题的小伙伴可以尝试一下。</p>
</blockquote>
<p>问题：在导入别人的项目时，Maven 完全无法导入依赖，打开仓库查看，发现 jar 包都是：<code>xxxx.jar.lastUpdate</code> 格式。</p>
<p>原因：因为网络或其他原因，未能引用 jar 包</p>
<p>解决：</p>
<ol>
<li>先删除所有后缀为 <code>lastUpdate</code> 的文件（在仓库根目录打开 cmd，执行 <code>for /r %i in (*.lastUpdated) do del %i</code>）</li>
<li>修正错误原因，然后重新导入依赖<ul>
<li>如果是网络原因就调整网络（没连 VPN 啥的）</li>
<li>如果是仓库原因就修改仓库地址（仓库地址写错了）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="gitignore-添加的规则不生效"><a href="#gitignore-添加的规则不生效" class="headerlink" title=".gitignore 添加的规则不生效"></a>.gitignore 添加的规则不生效</h3><p>学习 Git 的时候就知道需要在项目创建的时候就添加 .gitignore 文件，但是创建了项目之后难免会增加一些文件以及在 .gitignore 中添加一些新的规则，但是我在开发的时候遇到了添加的规则不生效的情况，查资料后发现了问题所在：</p>
<p>问题所在：对于已经加入版本控制（add 之后）的文件来说，再去 .gitignore 中配置相关的规则已经不起作用了，而 idea 中默认设置就是当你新建一个文件之后，就自动 add，这就导致即使是新建了文件，再去 .gitignore 中配置规则也不好使了。</p>
<blockquote>
<p>在 idea 中：Settings –&gt; Version Control –&gt; Confirmation，可以设置新建文件时是否自动 add</p>
</blockquote>
<p>问题解决：设置 idea 不自动将新建的文件 add，然后新建文件，再配置 .gitignore 规则，再 add 文件，就ok了</p>
<blockquote>
<p>新建文件 –&gt; add –&gt; 配置规则    <strong>×</strong></p>
<p>新建文件 –&gt; 配置规则 –&gt; add    <strong>√</strong></p>
</blockquote>
<p>对于已经被 Git 控制的文件，想要 ignore，可以在 idea 中将文件删除，然后再撤销删除，文件就恢复新建状态了</p>
<hr>
<h3 id="前后端项目部署在同一个阿里云服务器上，前端调后端接口报错：ERR-CONNECTION-REFUSED"><a href="#前后端项目部署在同一个阿里云服务器上，前端调后端接口报错：ERR-CONNECTION-REFUSED" class="headerlink" title="前后端项目部署在同一个阿里云服务器上，前端调后端接口报错：ERR_CONNECTION_REFUSED"></a>前后端项目部署在同一个阿里云服务器上，前端调后端接口报错：<code>ERR_CONNECTION_REFUSED</code></h3><p>两个地方：</p>
<ol>
<li>需要把后端所在端口在安全组中开放，同时关闭防火墙</li>
<li>调用后端接口时不能使用 127.0.0.1 或 localhost，需要使用 服务器的 ip</li>
</ol>
<hr>
<h3 id="启动-SpringBoot-项目时报错：Command-line-is-too-long"><a href="#启动-SpringBoot-项目时报错：Command-line-is-too-long" class="headerlink" title="启动 SpringBoot 项目时报错：Command line is too long"></a>启动 SpringBoot 项目时报错：<code>Command line is too long</code></h3><p>错误原因：打印的环境变量太长了，超过了限制。</p>
<p>错误修正：在项目的 .idea 文件夹中打开 workspace.xml 文件找到 <code>&lt;component name=&quot;PropertiesComponent&quot;&gt;</code> ，然后在该标签里加一行  <code>&lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</code> 就可以了</p>
<hr>
<h3 id="Maven-依赖冲突"><a href="#Maven-依赖冲突" class="headerlink" title="Maven 依赖冲突"></a>Maven 依赖冲突</h3><p>在启动项目的时候提示：一个类未定义（<code>java.lang.ClassNotFoundException</code>），但是相关依赖明明是引入进来的。打开 idea 的  Project Structure 检查 Libraries，发现有两个同样的依赖，但是版本号不同。这就是依赖冲突导致项目找不到相关的类。</p>
<p>解决：在其中一个会引用该依赖的 <code>&lt;dependency&gt;</code> 中使用 <code>&lt;exclusions&gt;</code> 排除该依赖。</p>
<hr>
<h3 id="Tomcat-在控制台报错：缓存不够用了"><a href="#Tomcat-在控制台报错：缓存不够用了" class="headerlink" title="Tomcat 在控制台报错：缓存不够用了"></a>Tomcat 在控制台报错：缓存不够用了</h3><p>错误信息：<code>org.apache.catalina.webresources.Cache.backgroundProcess 后台缓存收回进程无法释放上下文</code></p>
<p>解决：修改 <code>Tomcat目录/conf/context.xml</code>，在 <code>&lt;Context&gt;</code> 标签内增加</p>
<p><code>&lt;Resources cachingAllowed=&quot;true&quot; cacheMaxSize=&quot;102400&quot; /&gt;</code></p>
<blockquote>
<p>cacheMaxSize 为缓存大小，默认情况下是 10M，我们这里调整为 100M</p>
<p>调整后需要重启 Tomcat</p>
</blockquote>
<hr>
<h3 id="使用-Tomcat-部署的项目，在浏览器控制台中-js-文件中文乱码，导致页面出现错误"><a href="#使用-Tomcat-部署的项目，在浏览器控制台中-js-文件中文乱码，导致页面出现错误" class="headerlink" title="使用 Tomcat 部署的项目，在浏览器控制台中 js 文件中文乱码，导致页面出现错误"></a>使用 Tomcat 部署的项目，在浏览器控制台中 js 文件中文乱码，导致页面出现错误</h3><blockquote>
<p>Tomcat 版本：8.5.68</p>
</blockquote>
<p>解决方案：</p>
<ul>
<li><p>在 <code>Tomcat目录/conf/server.xml</code> 文件中 <code>Connector</code> 中添加 <code>URIEncoding=&quot;UTF-8&quot;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 <code>Tomcat目录/bin/catalina.bat</code> 文件中添加 <code>set &quot;JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% -Dfile.encoding=UTF-8&quot;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> <span class="string">"JAVA_OPTS=%JAVA_OPTS% %JSSE_OPTS% -Dfile.encoding=UTF-8"</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<hr>
<h3 id="Oracle-多表联查"><a href="#Oracle-多表联查" class="headerlink" title="Oracle 多表联查"></a>Oracle 多表联查</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	e.name,</span><br><span class="line">	d.dname,</span><br><span class="line">	c.cname</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	emp e, dept d, city c</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	e.deptno = d.deptno <span class="keyword">AND</span></span><br><span class="line">	d.cid = c.cid</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Oracle-把其他表中查询到的数据-及-基本数据-插入到一个表中"><a href="#Oracle-把其他表中查询到的数据-及-基本数据-插入到一个表中" class="headerlink" title="Oracle 把其他表中查询到的数据 及 基本数据 插入到一个表中"></a>Oracle 把其他表中查询到的数据 及 基本数据 插入到一个表中</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> AA10(</span><br><span class="line">	<span class="keyword">name</span>,</span><br><span class="line">    age,</span><br><span class="line">    salary</span><br><span class="line">)(</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">    	<span class="keyword">name</span>,</span><br><span class="line">    	age,</span><br><span class="line">    	<span class="number">5000</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">    	emp</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">    	<span class="keyword">id</span> = <span class="string">'1001'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="JS-比较两个日期"><a href="#JS-比较两个日期" class="headerlink" title="JS 比较两个日期"></a>JS 比较两个日期</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 两个日期相差多少天</span></span><br><span class="line"><span class="keyword">var</span> day1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2021-08-31"</span>);</span><br><span class="line"><span class="keyword">var</span> day2 = <span class="keyword">new</span> <span class="built_in">Date</span>();  <span class="comment">// 系统当前时间</span></span><br><span class="line"></span><br><span class="line">int gapDays = (day2 - day1) / (<span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> *<span class="number">24</span>)  <span class="comment">// 两个时间相减得到的是毫秒数的差距</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个日期前后</span></span><br><span class="line"><span class="built_in">console</span>.log(day1 &gt; day2)  <span class="comment">// 直接比较</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="发送-Get-请求时，把-JS-对象作为参数"><a href="#发送-Get-请求时，把-JS-对象作为参数" class="headerlink" title="发送 Get 请求时，把 JS 对象作为参数"></a>发送 Get 请求时，把 JS 对象作为参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要先把JS对象转成字符串，然后再拼到URL中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="built_in">JSON</span>.stringify(jsObj);  <span class="comment">// 对象转字符串</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="Oracle-中查询出多条记录只取第一条："><a href="#Oracle-中查询出多条记录只取第一条：" class="headerlink" title="Oracle 中查询出多条记录只取第一条："></a>Oracle 中查询出多条记录只取第一条：</h3><p>在 where 中加入 <code>rownum = 1</code> </p>
]]></content>
      <categories>
        <category>bugfix</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora + Hexo 图片相关设置</title>
    <url>/2019/10/14/Typora+Hexo%20%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>使用 Hexo 部署博客时，在 Typora 中添加图片的正确姿势</p>
<a id="more"></a>



<h3 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h3><ul>
<li>在 Typora 中写笔记的时候能够方便的添加图片, 把需要添加的图片直接拖进去就可以, 而不需要手写图片路径</li>
<li>直接拖到 Typora 里面的图片可以自动放到 <code>source/images</code> 文件夹中</li>
<li>图片在 Typora 里面和 Hexo 渲染之后都可以正常的显示 (需要图片的路径适合两种情况)</li>
</ul>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置:"></a>设置:</h3><ol>
<li><p>在 Typora  <code>文件--&gt;偏好设置--&gt;图像</code>  设置如下: </p>
<p>(直接拖入或者复制进Typora的图片会被复制到images文件夹下面的 以笔记文件名命名的文件夹中)</p>
<p><img src="http://www.flashnote.top/image-20210322100052295.png" alt="image-20210322100052295"></p>
</li>
</ol>
<ol start="2">
<li><p>在 Typora <code>格式--&gt;图像--&gt;设置图片根目录</code> 中设置根目录为 <code>source</code> 目录</p>
<p>设置了图片根目录之后, 在markdown笔记文件的头部信息中会出现 <code>typora-root-url</code></p>
<p><img src="http://www.flashnote.top/image-20210322100713968.png" alt="image-20210322100713968"></p>
</li>
</ol>
<p>经过以上两步设置之后就可以直接将图片放到markdown笔记中了</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h3><ul>
<li>一定要先设置 <code>图片根目录</code>, 再往笔记中添加图片, 否则图片路径会不正确, 在 Hexo 渲染后就无法显示</li>
</ul>
]]></content>
      <tags>
        <tag>Typora - Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>新电脑开发环境搭建</title>
    <url>/2019/07/06/%E6%96%B0%E7%94%B5%E8%84%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>从头开始搭建自己的开发环境</p>
<a id="more"></a>
<h1 id="新电脑开发环境搭建"><a href="#新电脑开发环境搭建" class="headerlink" title="新电脑开发环境搭建"></a>新电脑开发环境搭建</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>作为一名数码爱好者，以及一名准Java程序员，之前一直是用自己大一的时候买的一台笔记本来做Java程序的编写，那台笔记本在使用两年之后卡的不行不行的，在把内存从4G加到8G，机械硬盘换成固态后，又焕发了第二春。一直使用到现在。得益于固态硬盘的加持，日常轻度办公影音是没有问题，但是受限于i5-4200U这颗远古时代的处理器，启动个Tomcat服务器都需要20秒的时间，实在忍受不了，故心心念一台台式机，谋划良久，终于行动。</p>
</blockquote>
<p><strong>台式机配置清单：</strong></p>
<ul>
<li>CPU：AMD R5-2400G （AMD YES）</li>
<li>内存：金士顿 骇客神条 DDR4 2400 8G*2</li>
<li>主板：B350M BAZOOKA</li>
<li>固态：三星 970 EVO 250G M.2</li>
<li>机械硬盘：西数蓝盘 2T</li>
<li>电源：安钛克 VP300P </li>
<li>机箱：航嘉 暗夜猎手3 （这个机箱是真的烂，要不是穷，肯定不会买它）</li>
<li>显示器：戴尔 U2518DR（这个显示器是真的好）</li>
</ul>
<p><strong>基础软件清单：</strong></p>
<ul>
<li>系统：win10 专业版 1903 （收费）</li>
<li>IDE：IDEA 2019.1.3 （收费）</li>
<li>JDK：1.8.0_212</li>
<li>数据库：MySQL 5.5 （5.5版本仍然是免费的，学习使用足够了）</li>
<li>数据库开发工具：Navicat Premium 12 （收费）</li>
<li>服务器：Tomcat 9.0.21</li>
<li>代码管理：git</li>
<li>项目管理：Maven  3.6.1</li>
<li>博客框架：Hexo</li>
<li>Markdown编辑器：Typora</li>
<li>浏览器：FireFox</li>
<li>文本编辑器：Notepad++</li>
</ul>
<p><strong>软件安装流程：</strong></p>
<ol>
<li><p>系统：下载地址：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN</a> </p>
<p>激活：我用的KMS</p>
</li>
<li><p>IDE：下载地址：<a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">官网下载</a></p>
<p>激活：google，<em>希望有能力的同学还是支持正版</em></p>
</li>
<li><p>JDK：下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Oracle官网下载</a> 下载 jdk 送 jre</p>
</li>
<li><p>Navicat：下载地址：<a href="https://www.navicat.com.cn/products" target="_blank" rel="noopener">官网下载</a></p>
<p>破解：<a href="https://www.jianshu.com/p/5f693b4c9468/" target="_blank" rel="noopener">我参考的一篇文章</a></p>
</li>
<li><p>git：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">官网下载</a>，<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">国内代理服务器下载</a></p>
</li>
<li><p>Hexo：hexo安装可参考<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官网文档</a></p>
<p>一点注意事项：使用npm安装时速度比较慢，修改一下安装源即可：命令：npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>数码</tag>
        <tag>杂记</tag>
      </tags>
  </entry>
</search>
